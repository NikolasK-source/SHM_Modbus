#!/bin/bash

VERSION="1.1.1"

SLEEP_TIME=2

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself/4774063
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

source $SCRIPTPATH/guided-commands.sh
source $SCRIPTPATH/manual-commands.sh

EXEC_COMMANDS=( \
    "modbus-tcp-client-shm" \
    "modbus-rtu-client-shm" \
    "dump-shm" \
    "write-shm" \
    "stdin-to-modbus-shm" \
    "shared-mem-random" \
    "signal-gen" \
)

arg_count=$#

if [[ ( "$arg_count" < 1 ) ]] ; then
    >&2 echo "invalid call: use --help for more information"
    exit 64
fi

trap "exit 0" INT TERM

command=$1

if [ "$command" = "--help" ] || [ "$command" = "-h" ]; then
    echo "usage: $(basename "$0") [OPTION] command [CMD_OPTION..]"
    echo ""
    echo "  This script is a launcher script for several Modbus client simulator programs."
    echo "  Use --help as argument for commands to get more information about the usage of the program."
    echo ""
    echo "  options:"
    echo "    --guided                  start in guided mode"
    echo "    -h --help                 show this message"
    echo "    --version                 show version of this script"
    echo "    --version-all             show version of all Mosbus tools"
    echo "    --license                 print license information for this script"
    echo "    --license-all             print license information of all Modbus tools"
    echo ""
    echo "  commands:"
    for cmd in "${EXEC_COMMANDS[@]}"
    do
        printf '    %-25s execute %s with the given arguments' "$cmd" "$cmd"
        echo ""
    done
    exit 0
fi

if [ "$command" = "--version" ]; then
    echo "modbus-shm $VERSION"
    exit 0
fi

if [ "$command" = "--version-all" ]; then
    echo "modbus-shm $VERSION"
    for cmd in "${EXEC_COMMANDS[@]}"
    do
        if [[ -x "$SCRIPTPATH/$cmd" ]]; then
            $SCRIPTPATH/$cmd --version
        elif [[ -x "/bin/$cmd" ]]; then
            /bin/$cmd --version
        elif [[ -x "/usr/bin/$cmd" ]]; then
            /usr/bin/$cmd --version
        else
           # try to execute from path
           $cmd --version
        fi
        
    done
    exit 0
fi

function print_license {
    echo '  MIT License'
    echo ''
    echo '  Copyright (c) 2022 Nikolas Koesling'
    echo '  '
    echo '  Permission is hereby granted, free of charge, to any person obtaining a copy'
    echo '  of this software and associated documentation files (the "Software"), to deal'
    echo '  in the Software without restriction, including without limitation the rights'
    echo '  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell'
    echo '  copies of the Software, and to permit persons to whom the Software is'
    echo '  furnished to do so, subject to the following conditions:'
    echo ''
    echo '  The above copyright notice and this permission notice shall be included in all'
    echo '  copies or substantial portions of the Software.'
    echo ''
    echo '  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR'
    echo '  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,'
    echo '  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE'
    echo '  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER'
    echo '  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
    echo '  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE'
    echo '  SOFTWARE.'
}

if [ "$command" = "--license" ]; then
    print_license
    exit 0
fi

if [ "$command" = "--license-all" ]; then
    
    echo "====================> modbus-shm <===================="
    print_license "  "
    echo ""
    echo ""

    for cmd in "${EXEC_COMMANDS[@]}"
    do
        echo "====================> $cmd <===================="
        if [[ -x "$SCRIPTPATH/$cmd" ]]; then
            $SCRIPTPATH/$cmd --license
        elif [[ -x "/bin/$cmd" ]]; then
            /bin/$cmd --license
        elif [[ -x "/usr/bin/$cmd" ]]; then
            /usr/bin/$cmd --license
        else
           # try to execute from path
           $cmd --license
        fi
        echo ""
        echo ""
    done
    exit 0
fi

for cmd in "${EXEC_COMMANDS[@]}"
do
    if [ "$command" = "$cmd" ]; then
        trap "" INT TERM

        if [[ -x "$SCRIPTPATH/$command" ]]; then
            $SCRIPTPATH/$command "${@:2}"
        elif [[ -x "/bin/$cmd" ]]; then
            /bin/$command "${@:2}"
        elif [[ -x "/usr/bin/$cmd" ]]; then
            /usr/bin/$command "${@:2}"
        else
           # try to execute from path
           $command "${@:2}"
        fi

        exit $?
    fi
done

if [ "$command" = "--guided" ]; then
    while true
    do
        echo ">>>The following applications can be executed:"
        echo ">>>  Guided: This script will guide you through the command line arguments:"
        echo ">>>     1) modbus-tcp-client-shm"
        echo ">>>     2) modbus-rtu-client-shm"
        echo ">>>     3) dump-shm"
        echo ">>>     4) write-shm"
        echo ">>>     5) shared-mem-random"
        echo ">>>     6) stdin-to-modbus-shm"
        echo ">>>  Manual: specify the command line arguments manually:"
        echo ">>>    11) modbus-tcp-client-shm"
        echo ">>>    12) modbus-rtu-client-shm"
        echo ">>>    13) dump-shm"
        echo ">>>    14) write-shm"
        echo ">>>    15) shared-mem-random"
        echo ">>>    16) stdin-to-modbus-shm"
        echo ">>>  Other:"
        echo ">>>     0) exit"
        echo ">>>    20) list all shared memories"
        echo ">>>    99) output short information text for each possible application"

        # TODO user input
        read -p ">>>Enter command number: " user_input
        echo ""

        if [ "$user_input" = "0" ]; then                # exit
            # Do nothing
            break

        elif [ "$user_input" = "99" ]; then              # help
            # TODO
            echo ""
            echo "modbus-tcp-client-shm:"
            echo "    This application is a Modbus TCP client that stores the content of its registers in shared memory."
            echo ""
            echo "modbus-rtu-client-shm:"
            echo "    This application is a Modbus RTU client that stores the content of its registers in shared memory."
            echo ""
            echo "dump-shm:"
            echo "    This application outputs the content of a shared memory to stdout."
            echo "    It for example can be used to write the content to a file or to visualize it with a hexdump."
            echo ""
            echo "write-shm:"
            echo "    This application writes the data it reads from stdin to a shared memory."
            echo "    It can be used to load a shared memory from any file (e.g. /dev/zero, /dev/random, ...)."
            echo ""
            echo "shared-mem-random:"
            echo "    This application cyclically writes random values to a shared memory."
            echo ""
            echo "stdin-to-modbus-shm:"
            echo "    This application reads commands from stdin and writes them to the shared memory created by one of the shared memory"
            echo "    modbus clients (TCP/RTU)."

            echo ""
            read -p "press return to continue..." dummy

        elif [ "$user_input" = "1" ]; then              # modbus-tcp-client-shm guided
            guided_modbus_tcp_client_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "2" ]; then              # modbus-rtu-client-shm guided
            guided_modbus_rtu_client_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "3" ]; then              # dump-shm guided
            guided_dump_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "4" ]; then              # write-shm guided
            guided_write_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "5" ]; then              # shared-mem-random guided
            guided_shared_mem_random $SCRIPTPATH
            break

        elif [ "$user_input" = "6" ]; then              # stdin-to-modbus-shm guided
            guided_stdin_to_modbus_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "11" ]; then             # modbus-tcp-client-shm manual
            manual_modbus_tcp_client_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "12" ]; then             # modbus-rtu-client-shm manual
            manual_modbus_rtu_client_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "13" ]; then             # dump-shm manual
            manual_dump_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "14" ]; then             # write-shm manual
            manual_write_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "15" ]; then             # shared-mem-random manual
            manual_shared_mem_random $SCRIPTPATH
            break

        elif [ "$user_input" = "16" ]; then             # stdin-to-modbus-shm manual
            manual_stdin_to_modbus_shm $SCRIPTPATH
            break

        elif [ "$user_input" = "20" ]; then             # list shared memories
            shms=$(ls /dev/shm)

            if [ "$shms" = "" ]; then
                echo "no open shared memoy."
            else
                echo "Open shared memories:"
                for shm in ${shms}
                do
                    echo "  - $shm"
                done
            fi
            
            sleep $SLEEP_TIME
            echo ""

        else
            >&2 echo "invalid input. try again. use 0 to exit."
            sleep $SLEEP_TIME
            echo ""
            continue
        fi

        echo ""
    done

    exit 0;
fi

>&2 echo "unknown command $command: use --help for more information"
exit 64
