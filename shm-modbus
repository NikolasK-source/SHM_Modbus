#!/bin/bash

VERSION="0.0.1"

# https://stackoverflow.com/questions/4774054/reliable-way-for-a-bash-script-to-get-the-full-path-to-itself/4774063
SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

EXEC_COMMANDS=( \
    "modbus-tcp-client-shm" \
    "modbus-rtu-client-shm" \
    "dump-shm" \
    "write-shm" \
    "stdin-to-modbus-shm" \
    "shared-mem-random" \
)

arg_count=$#

if [[ ( "$arg_count" < 1 ) ]] ; then
    >&2 echo "uinvalid call: use --help for more information"
    exit 64
fi

command=$1



if [ "$command" = "--help" ] || [ "$command" = "-h" ]; then
    echo "usage: $(basename "$0") [OPTION] command [CMD_OPTION..]"
    echo ""
    echo "  This script is a launcher script for several Modbus client simulator programs."
    echo "  Use --help as argument for commands to get mor information about the usage of the program."
    echo ""
    echo "  options:"
    echo "    --desktop                 start in desktop mode"
    echo "    -h --help                 show this message"
    echo "    --install                 copy scripts to ~/bin to start the Modbus tools by calling their name"
    echo "    --uninstall               remove scripts from ~/bin"
    echo "    --version                 show version of this script"
    echo "    --version-all             show version of all Mosbus tools"
    echo "    --license                 print license information for this script"
    echo "    --license-all             print license information of all Modbus tools"
    echo ""
    echo "  commands:"
    for cmd in "${EXEC_COMMANDS[@]}"
    do
        printf '    %-25s execute %s with the given arguments' "$cmd" "$cmd"
        echo ""
    done
    exit 0
fi

if [ "$command" = "--version" ]; then
    echo "modbus-shm $VERSION"
    exit 0
fi

function print_license {
    echo '  MIT License'
    echo ''
    echo '  Copyright (c) 2022 Nikolas Koesling'
    echo '  '
    echo '  Permission is hereby granted, free of charge, to any person obtaining a copy'
    echo '  of this software and associated documentation files (the "Software"), to deal'
    echo '  in the Software without restriction, including without limitation the rights'
    echo '  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell'
    echo '  copies of the Software, and to permit persons to whom the Software is'
    echo '  furnished to do so, subject to the following conditions:'
    echo ''
    echo '  The above copyright notice and this permission notice shall be included in all'
    echo '  copies or substantial portions of the Software.'
    echo ''
    echo '  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR'
    echo '  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,'
    echo '  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE'
    echo '  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER'
    echo '  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,'
    echo '  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE'
    echo '  SOFTWARE.'
}

if [ "$command" = "--license" ]; then
    print_license
    exit 0
fi

if [ "$command" = "--license-all" ]; then
    
    echo "====================> modbus-shm <===================="
    print_license "  "
    echo ""
    echo ""

    for cmd in "${EXEC_COMMANDS[@]}"
    do
        echo "====================> $cmd <===================="
        $SCRIPTPATH/$cmd --license
        echo ""
        echo ""
    done
    exit 0
fi

if [ "$command" = "--install" ]; then
    for cmd in "${EXEC_COMMANDS[@]}"
    do
        install -D -m755 "$SCRIPTPATH/scripts/$cmd" "$HOME/bin/$cmd"
    done    

    echo "Installation completed. Enshure that \$HOME/bin is in your PATH environment variable."

    exit 0
fi

if [ "$command" = "--uninstall" ]; then
    for cmd in "${EXEC_COMMANDS[@]}"
    do
        # TODO use sha256sum to check if the file is the one that was installed by this script
        rm -f ~/bin/$cmd
    done  
    exit 0
fi

for cmd in "${EXEC_COMMANDS[@]}"
do
    if [ "$command" = "$cmd" ]; then
        $SCRIPTPATH/$command "${@:2}"
        exit 0
    fi
done

if [ "$command" = "--desktop" ]; then
    echo "To use the full potential of the available Modbus tools the program must be started from the command line."

    while true
    do
        echo ""
        echo "Select your command:"
        echo "   1) start modbus-tcp-client-shm (port 5020, 128 registers per type)"
        echo "   2) start modbus-tcp-client-shm (port 5020, 128 registers per type) in reconnect mode"
        echo ""
        echo "  10) create hexdump of shared memory modbus_DO"
        echo "  11) create hexdump of shared memory modbus_DI"
        echo "  12) create hexdump of shared memory modbus_AO"
        echo "  13) create hexdump of shared memory modbus_AI"
        echo ""
        echo "  18) initialize shared memory modbus_DO with all bits 0"
        echo "  19) initialize shared memory modbus_DO with all bits 1"
        echo "  20) initialize shared memory modbus_DO with random values"
        echo "  21) initialize shared memory modbus_DI with all bits 0"
        echo "  22) initialize shared memory modbus_DI with all bits 1"
        echo "  23) initialize shared memory modbus_DI with random values"
        echo "  24) initialize shared memory modbus_AO with all bits 0"
        echo "  25) initialize shared memory modbus_AO with all bits 1"
        echo "  26) initialize shared memory modbus_AO with random values"
        echo "  27) initialize shared memory modbus_AI with all bits 0"
        echo "  28) initialize shared memory modbus_AI with all bits 1"
        echo "  29) initialize shared memory modbus_AI with random values"
        echo ""
        echo "  30) run stdin-to-modbus-shm"

        # TODO user input
        read -p "Enter command number: " user_input

        if [ "$user_input" = "0" ]; then
            exit 0
        elif [ "$user_input" = "1" ]; then
            $SCRIPTPATH/modbus-tcp-client-shm -p 5020 --do-registers 128 --di-registers 128 --ao-registers 128 --ai-registers 128

        elif [ "$user_input" = "2" ]; then
            $SCRIPTPATH/modbus-tcp-client-shm -p 5020 -r --do-registers 128 --di-registers 128 --ao-registers 128 --ai-registers 128

        elif [ "$user_input" = "10" ]; then
            $SCRIPTPATH/dump-shm modbus_DO | hexdump -C -v

        elif [ "$user_input" = "11" ]; then
            $SCRIPTPATH/dump-shm modbus_DI | hexdump -C -v

        elif [ "$user_input" = "12" ]; then
            $SCRIPTPATH/dump-shm modbus_AO | hexdump -C -v

        elif [ "$user_input" = "13" ]; then
            $SCRIPTPATH/dump-shm modbus_AI | hexdump -C -v

        elif [ "$user_input" = "18" ]; then
            $SCRIPTPATH/write-shm -n modbus_DO < /dev/zero
            echo "ok"

        elif [ "$user_input" = "19" ]; then
            $SCRIPTPATH/write-shm -n modbus_DO -i < /dev/zero && echo "ok"

        elif [ "$user_input" = "20" ]; then
            $SCRIPTPATH/write-shm -n modbus_DO < /dev/random && echo "ok"

        elif [ "$user_input" = "21" ]; then
            $SCRIPTPATH/write-shm -n modbus_DI < /dev/zero && echo "ok"

        elif [ "$user_input" = "22" ]; then
            $SCRIPTPATH/write-shm -n modbus_DI -i < /dev/zero && echo "ok"
            
        elif [ "$user_input" = "23" ]; then
            $SCRIPTPATH/write-shm -n modbus_DI < /dev/random && echo "ok"
            
        elif [ "$user_input" = "24" ]; then
            $SCRIPTPATH/write-shm -n modbus_AO < /dev/zero && echo "ok"
            
        elif [ "$user_input" = "25" ]; then
            $SCRIPTPATH/write-shm -n modbus_AO -i < /dev/zero && echo "ok"
            
        elif [ "$user_input" = "26" ]; then
            $SCRIPTPATH/write-shm -n modbus_AO < /dev/random && echo "ok"
            
        elif [ "$user_input" = "27" ]; then
            $SCRIPTPATH/write-shm -n modbus_AI < /dev/zero && echo "ok"
            
        elif [ "$user_input" = "28" ]; then
            $SCRIPTPATH/write-shm -n modbus_AI -i < /dev/zero && echo "ok"
            
        elif [ "$user_input" = "29" ]; then
            $SCRIPTPATH/write-shm -n modbus_AI < /dev/random && echo "ok"
            
        elif [ "$user_input" = "30" ]; then
            $SCRIPTPATH/stdin-to-modbus-shm
  
        else
            >&2 echo "invalid input. try again. use 0 to exit."
            continue
        fi

        break;
    done

    exit 0;
fi

>&2 echo "unknown command $command: use --help for more information"
exit 64
